Нека създадем клас Aplication,
който да държи логиката на app-a и да се стартира,
когато всичко е готово.
Обикновенно такива библиотечни методи ги държим
в папката Core

Kонтролeрите в момента пишат по екрана,
но това е работа на view-тата
т.е контролерите трябва да викат някакви html-и
трябва да изнесем тази работа от контролерите въе вютата

Предлагам да следваме логиката, която следвахме и при
http хенлърите т.е.
Да има папка с името на контролерчето
и html-и с името на методите

В папката View създаваме папка User
В папката User създаваме файловете
profile.php и register.php
Преместваме html-a от метода profile на User
във файла profile.php
В този html има две променливи ($name и $called) т.е. те
трябва да му бъдат пратени, което директно означава, че
на html-a трябва да му се изпрати т. нар. вю-модел
<?php /** @var Models\ViewModels\UserProfileViewModel $model */?>

Променяме метода profile на User
   $model = new UserProfileViewModel($name, $called);
   require_once 'Views/User/profile.php';
това обаче е бойлер плейт
Можем да го абстрактнем като го капсулираме в клас, който се
занимава с тези неща
Библиотечен клас View (т.е. трябва да е в Core)
Този клас изпълнява бизнес логика и е добре да имплементира
интерфейс например ViewInterface
Тъй като се очаква mvc да се разрастне папката Core ще се пълни
експоненциално за това е добре да се раздели на namespaces
В папката Core създаваме папка View и в нея преместваме класа View
заедно с интерфейса му ViewInterface

---
ucfirst е добре да не е в index.php, а в Application.php
---
PhpStorm : auto-generate methods of the implemented interface
You could try ALT+ENTER.
This normaly shows up a small "dialog" to autogenerate phpdoc,
functions, etc.
---

Добре би било, когато вютата следват конвенция
views/controllerName/action.php
да не се налага да ги изписваме
За това създаваме прпъртита в класа View
private $controllerName;
private $actionName;


